{"version":3,"sources":["shaders.js","Globe.js","App.js","reportWebVitals.js","index.js"],"names":["blueRed","uniforms","colorA","type","value","THREE","colorB","displacementA","vertexShader","fragmentShader","extend","OrbitControls","EffectComposer","RenderPass","ShaderPass","lats","range","lngs","DataViz","animate","setDisplacement","displacement","populationIndex","lineSegmentsRef","useRef","useState","dd","setDD","useFrame","current","rotation","y","populationAttributes","useMemo","Float32Array","flatMap","lat","latPositions","map","lng","latSegments","length","i","flatten","positions","u","phi","Math","PI","theta","sin","cos","toPoint","useEffect","material","uniformsNeedUpdate","geom","attach","attachObject","count","array","itemSize","ref","camContext","React","createContext","Controls","children","useThree","gl","camera","invalidate","api","handler","addEventListener","removeEventListener","args","domElement","enableDamping","enabled","Provider","Globe","props","hovered","setHover","active","viz","raycaster","params","Line","threshold","position","scale","onPointerOver","event","onPointerOut","color","App","data","setData","setAnimate","window","fetch","then","res","json","d","fromPairs","chunk","className","min","max","step","onChange","ev","parseFloat","target","id","name","checked","console","log","htmlFor","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d2bce009.chunk.js","sourcesContent":["import * as THREE from \"three\";\n\nexport const blueRed = {\n  uniforms: {\n    colorA: { type: \"vec3\", value: new THREE.Color(0xff0000) },\n    colorB: { type: \"vec3\", value: new THREE.Color(0x0000ff) },\n    displacementA: { value: 1 },\n  },\n  vertexShader: `\n    varying vec3 vUv; \n    uniform float displacementA; \n    attribute float population;\n\n    void main() {\n      vUv = position; \n      vec3 posA;\n      posA = position * (displacementA * population + 1.0);\n      vec4 modelViewPosition = modelViewMatrix * vec4(posA.x, posA.y, posA.z, 1.0);\n      gl_Position = projectionMatrix * modelViewPosition; \n    }\n  `,\n  fragmentShader: `\n    uniform vec3 colorA; \n    uniform vec3 colorB; \n    varying vec3 vUv;\n\n    void main() {\n        gl_FragColor = vec4(mix(colorA, colorB, vUv.z), 1.0);\n    }\n  `,\n};\n","import React, { useMemo, useEffect, useRef, useState } from \"react\";\nimport { Canvas, useFrame, extend, useThree } from \"react-three-fiber\";\nimport { flatten, range } from \"lodash\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport { EffectComposer } from \"three/examples/jsm/postprocessing/EffectComposer\";\nimport { RenderPass } from \"three/examples/jsm/postprocessing/RenderPass\";\nimport { ShaderPass } from \"three/examples/jsm/postprocessing/ShaderPass\";\nimport { blueRed } from \"./shaders\";\n\nextend({ OrbitControls, EffectComposer, RenderPass, ShaderPass });\n\nfunction toPoint(lat, lng, u) {\n  const phi = (90 - lat) * (Math.PI / 180);\n  const theta = (180 - lng) * (Math.PI / 180);\n  const x = u * Math.sin(phi) * Math.cos(theta);\n  const y = u * Math.cos(phi);\n  const z = u * Math.sin(phi) * Math.sin(theta);\n  return [x, y, z];\n}\n\nconst step = -1;\nconst lats = range(80, -80 + step, step);\nconst lngs = range(180, -180 + step, step);\n\nfunction DataViz({ animate, setDisplacement, displacement, populationIndex }) {\n  // This reference will give us direct access to the mesh\n  const lineSegmentsRef = useRef();\n  const [dd, setDD] = useState(0.01);\n\n  // Rotate mesh every frame, this is outside of React without overhead\n  useFrame(() => {\n    lineSegmentsRef.current.rotation.y += 0.001;\n    if (animate) {\n      if (displacement >= 2) {\n        setDD(-0.01);\n      } else if (displacement <= 0) {\n        setDD(0.01);\n      }\n      setDisplacement(displacement + dd);\n    }\n  });\n\n  const populationAttributes = useMemo(\n    () =>\n      new Float32Array(\n        lats.flatMap((lat) => {\n          const latPositions = lngs.map(\n            (lng) => (populationIndex[[lat, lng]] || 0) * 1\n          );\n          const latSegments = range(latPositions.length - 1).flatMap((i) => [\n            latPositions[i],\n            latPositions[i + 1],\n          ]);\n          return flatten(latSegments);\n        })\n      ),\n    [populationIndex.length]\n  );\n\n  const positions = useMemo(\n    () =>\n      new Float32Array(\n        lats.flatMap((lat) => {\n          // latPositions: [x,y,z][]\n          const latPositions = lngs.map((lng) => toPoint(lat, lng, 2));\n          // latSegments: [x,y,z][]\n          const latSegments = range(latPositions.length - 1).flatMap((i) => [\n            latPositions[i],\n            latPositions[i + 1],\n          ]);\n          // return [x,y,z,x,y,z,...]\n          return flatten(latSegments);\n        })\n      ),\n    [populationIndex.length]\n  );\n\n  useEffect(() => {\n    const { current } = lineSegmentsRef;\n    current.material.uniformsNeedUpdate = true;\n    current.material.uniforms.displacementA.value = displacement;\n  }, [lineSegmentsRef, positions, displacement]);\n\n  const { uniforms, fragmentShader, vertexShader } = blueRed;\n\n  const geom = useMemo(() => {\n    return (\n      <bufferGeometry attach=\"geometry\">\n        <bufferAttribute\n          attachObject={[\"attributes\", \"position\"]}\n          count={positions.length / 3}\n          array={positions}\n          itemSize={3}\n        />\n        <bufferAttribute\n          attachObject={[\"attributes\", \"population\"]}\n          count={populationAttributes.length}\n          array={populationAttributes}\n          itemSize={1}\n        />\n      </bufferGeometry>\n    );\n  }, []);\n\n  return (\n    <>\n      <lineSegments ref={lineSegmentsRef}>\n        {geom}\n        <shaderMaterial\n          attach=\"material\"\n          uniforms={uniforms}\n          fragmentShader={fragmentShader}\n          vertexShader={vertexShader}\n        />\n      </lineSegments>\n    </>\n  );\n}\n\nconst camContext = React.createContext();\nfunction Controls({ children }) {\n  const { gl, camera, invalidate } = useThree();\n  const api = useState(true);\n  const ref = useRef();\n  useEffect(() => {\n    const current = ref.current;\n    const handler = current.addEventListener(\"change\", invalidate);\n    return () => current.removeEventListener(\"change\", handler);\n  }, [invalidate]);\n\n  return (\n    <>\n      <orbitControls\n        ref={ref}\n        args={[camera, gl.domElement]}\n        enableDamping\n        enabled={api[0]}\n      />\n      <camContext.Provider value={api}>{children}</camContext.Provider>\n    </>\n  );\n}\n\nexport const Globe = (props) => {\n  // Set up state for the hovered and active state\n  const [hovered, setHover] = useState(false);\n  const [active, setActive] = useState(false);\n  const viz = useMemo(() => <DataViz {...props} />, [\n    props.displacement,\n    props.populationIndex,\n  ]);\n\n  return (\n    <Canvas raycaster={{ params: { Line: { threshold: 5 } } }}>\n      <color attach=\"background\" args={[\"lightblue\"]} />\n      <ambientLight />\n      <pointLight position={[10, 10, 10]} />\n      <Controls>\n        {viz}\n        <mesh\n          position={[0, 0, 0]}\n          scale={!active ? [2, 2, 2] : [1, 1, 1]}\n          // onClick={(event) => setActive(!active)}\n          onPointerOver={(event) => setHover(true)}\n          onPointerOut={(event) => setHover(false)}\n        >\n          <sphereBufferGeometry args={[1, 12, 12]} />\n          <meshStandardMaterial color={hovered ? \"hotpink\" : \"orange\"} />\n        </mesh>\n      </Controls>\n    </Canvas>\n  );\n};\n","import { useEffect, useState } from \"react\";\nimport { chunk, fromPairs } from \"lodash\";\nimport \"./App.css\";\nimport { Globe } from \"./Globe\";\n\nfunction App() {\n  const [data, setData] = useState(null);\n  const [displacement, setDisplacement] = useState(1);\n  const [animate, setAnimate] = useState(true);\n\n  useEffect(() => {\n    window\n      .fetch(\"./data/population909500.json\")\n      .then((res) => res.json())\n      .then(([a, b, [year, d]]) => {\n        setData(d);\n      });\n  }, []);\n\n  const populationIndex = fromPairs(\n    chunk(data, 3).map(([lat, lng, v]) => [[lat, lng], v])\n  );\n\n  if (!data) {\n    return \"Loading...\";\n  }\n\n  return (\n    <div className=\"bg-gray-100 h-screen flex flex-col\">\n      <header className=\"bg-white shadow\">\n        <div className=\"max-w-7xl mx-auto py-6 px-4 sm:px-6 lg:px-8\">\n          <h1 className=\"text-3xl font-bold text-gray-900\">Globen</h1>\n        </div>\n      </header>\n      <main className=\"relative h-full flex-1\">\n        <Globe\n          animate={animate}\n          setDisplacement={setDisplacement}\n          displacement={displacement}\n          populationIndex={populationIndex}\n        />\n\n        <div className=\"absolute top-4 left-4 shadow sm:rounded-md sm:overflow-hidden\">\n          <div className=\"px-4 py-5 bg-white space-y-6 sm:p-6\">\n            <label className=\"block text-sm font-medium text-gray-700\">\n              Displacement\n            </label>\n            <div className=\"mt-1 flex rounded-md shadow-sm\">\n              <input\n                type=\"range\"\n                min=\"0\"\n                max=\"2\"\n                value={displacement}\n                step=\"0.001\"\n                onChange={(ev) => setDisplacement(parseFloat(ev.target.value))}\n              />\n            </div>\n            <div className=\"flex items-start\">\n              <div className=\"flex items-center h-5\">\n                <input\n                  id=\"animate\"\n                  name=\"animate\"\n                  type=\"checkbox\"\n                  checked={animate}\n                  className=\"focus:ring-indigo-500 h-4 w-4 text-indigo-600 border-gray-300 rounded\"\n                  onChange={(ev) => {\n                    console.log(ev.target.checked);\n                    setAnimate(ev.target.checked);\n                  }}\n                />\n              </div>\n              <div className=\"ml-3 text-sm\">\n                <label htmlFor=\"animate\" className=\"font-medium text-gray-700\">\n                  Animate\n                </label>\n                <p className=\"text-gray-500\">Animate the displacement</p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}